<div class="container mt-5">
  <%= form_with url: students_path, method: :get, local: true, class: 'mb-4' do |f| %>
    <div class="row">
      <div class="col-md-3 mb-3">
        <%= f.label :full_name, "Фамилия и инициалы" %>
        <%= f.text_field :full_name, class: 'form-control', placeholder: "Фамилия и инициалы", value: params[:full_name] %>
      </div>

      <div class="col-md-3 mb-3">
        <%= f.label :git, "Git" %>
        <%= f.select :git, options_for_select([['Да', 'yes'], ['Нет', 'no']], params[:git]), { include_blank: 'Не важно' }, { class: 'form-control', id: 'git-select' } %>
        <%= f.text_field :git_value, class: 'form-control mt-2', placeholder: "Git", id: 'git-text-field', value: params[:git_value], disabled: params[:git] != 'yes' %>
      </div>

      <div class="col-md-3 mb-3">
        <%= f.label :email, "Email" %>
        <%= f.select :email, options_for_select([['Да', 'yes'], ['Нет', 'no']], params[:email]), { include_blank: 'Не важно' }, { class: 'form-control', id: 'email-select' } %>
        <%= f.text_field :email_value, class: 'form-control mt-2', placeholder: "Email", id: 'email-text-field', value: params[:email_value], disabled: params[:email] != 'yes' %>
      </div>

      <div class="col-md-3 mb-3">
        <%= f.label :phone, "Номер телефона" %>
        <%= f.select :phone, options_for_select([['Да', 'yes'], ['Нет', 'no']], params[:phone]), { include_blank: 'Не важно' }, { class: 'form-control', id: 'phone-select' } %>
        <%= f.text_field :phone_value, class: 'form-control mt-2', placeholder: "Номер телефона", id: 'phone-text-field', value: params[:phone_value], disabled: params[:phone] != 'yes' %>
      </div>

      <div class="col-md-3 mb-3">
        <%= f.label :telegram, "Telegram" %>
        <%= f.select :telegram, options_for_select([['Да', 'yes'], ['Нет', 'no']], params[:telegram]), { include_blank: 'Не важно' }, { class: 'form-control', id: 'telegram-select' } %>
        <%= f.text_field :telegram_value, class: 'form-control mt-2', placeholder: "Telegram", id: 'telegram-text-field', value: params[:telegram_value], disabled: params[:telegram] != 'yes' %>
      </div>

      <div class="col-md-3 mb-3">
        <%= link_to 'Сбросить фильтры', students_path, class: 'btn btn-danger', style: 'margin-top: 30px;' %>
      </div>
    </div>
  <% end %>

  <table class="table table-bordered">
    <thead class="table-light">
      <tr>
        <th></th>
        <th>№</th>
        <th>
          <%= link_to 'Полное имя', class: 'sortable', data: { column: 'first_name' } do %>
            <span>Полное имя</span>
          <% end %>
        </th>
        <th>
          <%= link_to 'Git', class: 'sortable', data: { column: 'git' } do %>
            <span>Git</span>
          <% end %>
        </th>
        <th>
          <%= link_to 'Контакт', class: 'sortable', data: { column: 'contact' } do %>
            <span>Контакт</span>
          <% end %>
        </th>
      </tr>
    </thead>
    <tbody>
      <% @students.each_with_index do |student, index| %>
        <tr class="<%= 'table-danger' unless student.validate? %>">
          <td>
            <input type="checkbox" class="student-checkbox" data-id="<%= student.id %>">
          </td>
          <td><%= (@page - 1) * @per_page + index + 1 %></td>
          <td><%= student.get_full_name %></td>
          <td><%= student.git %></td>
          <td><%= student.get_any_contact %></td>
        </tr>
      <% end %>
    </tbody>
  </table>

  <div class="mt-3 d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
      <% if @page > 1 %>
        <%= link_to '<', students_path(page: @page - 1, full_name: params[:full_name], git: params[:git], email: params[:email], phone: params[:phone], telegram: params[:telegram], sort_column: params[:sort_column], sort_order: params[:sort_order]), class: 'btn btn-secondary' %>
      <% else %>
        <button class="btn btn-secondary disabled"><</button>
      <% end %>

      <span class="mx-3">Страница <%= @page %> из <%= @total_pages %></span>

      <% if @page < @total_pages %>
        <%= link_to '>', students_path(page: @page + 1, full_name: params[:full_name], git: params[:git], email: params[:email], phone: params[:phone], telegram: params[:telegram], sort_column: params[:sort_column], sort_order: params[:sort_order]), class: 'btn btn-secondary' %>
      <% else %>
        <button class="btn btn-secondary disabled">></button>
      <% end %>
    </div>
  </div>

  <div class="d-flex justify-content-between mt-3">
    <button id="add-btn" class="btn btn-success">Добавить</button>
    <button id="update-btn" class="btn btn-info">Обновить</button>
    <button id="edit-btn" class="btn btn-primary">Изменить</button>
    <button id="edit-git-btn" class="btn btn-warning">Изменить Git</button>
    <button id="edit-contact-btn" class="btn btn-secondary">Изменить контакты</button>
    <button id="delete-btn" class="btn btn-danger">Удалить</button>
  </div>
</div>

<script>
  function toggleSortDirection(column) {
    const currentDirection = new URLSearchParams(window.location.search).get('sort_direction');
    return (currentDirection === 'asc' || currentDirection === null) && column === new URLSearchParams(window.location.search).get('sort_column') ? 'desc' : 'asc';
  }

  function toggleTextField(selectId, textFieldId) {
    const selectElement = document.getElementById(selectId);
    const textField = document.getElementById(textFieldId);
    if (selectElement.value === 'yes') {
      textField.disabled = false;
    } else {
      textField.disabled = true;
    }
  }

  document.getElementById('git-select').addEventListener('change', function() {
    toggleTextField('git-select', 'git-text-field');
  });
  document.getElementById('email-select').addEventListener('change', function() {
    toggleTextField('email-select', 'email-text-field');
  });
  document.getElementById('phone-select').addEventListener('change', function() {
    toggleTextField('phone-select', 'phone-text-field');
  });
  document.getElementById('telegram-select').addEventListener('change', function() {
    toggleTextField('telegram-select', 'telegram-text-field');
  });

  toggleTextField('git-select', 'git-text-field');
  toggleTextField('email-select', 'email-text-field');
  toggleTextField('phone-select', 'phone-text-field');
  toggleTextField('telegram-select', 'telegram-text-field');

  function toggleSortDirection(column) {
    const urlParams = new URLSearchParams(window.location.search);
    const currentSortColumn = urlParams.get('sort_column');
    const currentSortDirection = urlParams.get('sort_order');

    if (currentSortColumn === column) {
      urlParams.set('sort_order', currentSortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      urlParams.set('sort_column', column);
      urlParams.set('sort_order', 'asc');
    }

    window.location.search = urlParams.toString();
  }

  document.querySelectorAll('.sortable').forEach(element => {
    element.addEventListener('click', function(event) {
      event.preventDefault();
      toggleSortDirection(this.dataset.column);
    });
  });

  document.getElementById('update-btn').addEventListener('click', function() {
    const full_name = document.querySelector('[name="full_name"]').value;
    const git = document.querySelector('[name="git"]').value;
    const email = document.querySelector('[name="email"]').value;
    const phone = document.querySelector('[name="phone"]').value;
    const telegram = document.querySelector('[name="telegram"]').value;

    let url = new URL(window.location.href);
    url.searchParams.set('full_name', full_name);
    url.searchParams.set('git', git);
    url.searchParams.set('email', email);
    url.searchParams.set('phone', phone);
    url.searchParams.set('telegram', telegram);

    const sortColumn = new URLSearchParams(window.location.search).get('sort_column');
    const sortOrder = new URLSearchParams(window.location.search).get('sort_order');
    const page = 1;

    url.searchParams.set('sort_column', sortColumn || 'id');
    url.searchParams.set('sort_order', sortOrder || 'asc');
    url.searchParams.set('page', page);

    window.location.href = url.toString();
  });

  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.student-checkbox');
    const editBtn = document.getElementById('edit-btn');
    const editGitBtn = document.getElementById('edit-git-btn');
    const editContactBtn = document.getElementById('edit-contact-btn');
    const deleteBtn = document.getElementById('delete-btn');

    function updateButtonStates() {
      const checkedCount = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;

      const isSingleSelection = checkedCount === 1;
      editBtn.disabled = !isSingleSelection;
      editGitBtn.disabled = !isSingleSelection;
      editContactBtn.disabled = !isSingleSelection;

      deleteBtn.disabled = checkedCount === 0;
    }

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateButtonStates);
    });

    updateButtonStates();
  });
</script>

<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
